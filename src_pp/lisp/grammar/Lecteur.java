/* Generated By:JavaCC: Do not edit this line. Lecteur.java */
package lisp.grammar;
//<Section d’import>
import lisp.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.FileInputStream;

public class Lecteur implements LecteurConstants {
  /** le support de lecture */
  protected static java.io.Reader entree = new BufferedReader(new InputStreamReader(System.in));

  /** lecture d'une S-EXPR au terminal
	* @return Sexpr : la Sexpr construite.
	* @throws LispException une erreur de syntaxe */
  public static Sexpr read() throws LispException
  {
    try
    {
      Sexpr res = new Lecteur(entree).SEXPR_SEULE();
      return res;
    }
    catch (Throwable e)
    {
      throw new LispException("");
    }
  }

  /** lecture d'une S-EXPR à partir de la chaîne
	* @param s : la chaîne
	* @return Sexpr : la Sexpr construite.
	* @throws LispException une erreur de syntaxe */
  public static Sexpr read(String s) throws LispException
  {
    try
    {
      Sexpr res = new Lecteur(new java.io.StringReader(s)).SEXPR_SEULE();
      return res;
    }
    catch (Throwable e)
    {
      throw new LispException("");
    }
  }

  /** évaluation de la séquence S-EXPRs à partir du fichier s
	* @param s : le nom du fichier
	* @return ArrayList<Sexpr> : liste de S-EXPRs.
	* @throws LispException une erreur de lecture */
  public static ArrayList < Sexpr > importe(String s) throws LispException
  {
    try
    {
      InputStream ips = new FileInputStream(s);
      InputStreamReader ipsr = new InputStreamReader(ips);
      BufferedReader br = new BufferedReader(ipsr);
      ArrayList < Sexpr > res = new Lecteur(br).SEXPRESSIONS();
      return res;
    }
    catch (Throwable e)
    {
      throw new LispException("");
    }
  }

// Les règles de production
  final public Sexpr SEXPR_SEULE() throws ParseException {
  Sexpr s1;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      jj_consume_token(0);
    {if (true) return new Symbol(t.toString());}
      break;
    case PAROUV:
      jj_consume_token(PAROUV);
      s1 = DEBLIST();
      jj_consume_token(0);
    {if (true) return s1;}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      s1 = SEXPR();
      jj_consume_token(0);
    {if (true) return new SCons(new Symbol("quote"), new SCons(s1, Nil.NIL));}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Sexpr SEXPR() throws ParseException {
  Sexpr s1;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
    {if (true) return new Symbol(t.toString());}
      break;
    case PAROUV:
      jj_consume_token(PAROUV);
      s1 = DEBLIST();
    {if (true) return s1;}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      s1 = SEXPR();
    {if (true) return new SCons(new Symbol("quote"), new SCons(s1, Nil.NIL));}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Sexpr DEBLIST() throws ParseException {
  Sexpr s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARFERM:
      jj_consume_token(PARFERM);
    {if (true) return Nil.NIL;}
      break;
    case PAROUV:
    case ID:
    case QUOTE:
      s1 = LIST();
      jj_consume_token(PARFERM);
    {if (true) return s1;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Sexpr LIST() throws ParseException {
  Sexpr s1;
  Sexpr s2;
    s1 = SEXPR();
    s2 = FINLIST();
    {if (true) return new SCons(s1, s2);}
    throw new Error("Missing return statement in function");
  }

  final public Sexpr FINLIST() throws ParseException {
  Sexpr s1;
  Sexpr s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      s1 = SEXPR();
    {if (true) return new SCons(new Symbol("point"), s1);}
      break;
    case PAROUV:
    case ID:
    case QUOTE:
      s1 = SEXPR();
      s2 = FINLIST();
    if(s2 == Nil.NIL)
    {
      {if (true) return s1;}
    }
    else
    {
      {if (true) return new SCons(s1, s2);}
    }
      break;
    default:
      jj_la1[3] = jj_gen;
    {if (true) return Nil.NIL;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList < Sexpr > SEXPRESSIONS() throws ParseException {
  Sexpr s;
    ArrayList < Sexpr > L = new ArrayList < Sexpr > ();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAROUV:
      case ID:
      case QUOTE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      s = SEXPR();
      L.add(s);
    }
    jj_consume_token(0);
    {if (true) return L;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public LecteurTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1900,0x1900,0x1b00,0x1d00,0x1900,};
   }

  /** Constructor with InputStream. */
  public Lecteur(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lecteur(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LecteurTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lecteur(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LecteurTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lecteur(LecteurTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LecteurTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
