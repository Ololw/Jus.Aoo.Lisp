/* Generated By:JavaCC: Do not edit this line. Reader.java */
package grammaire;
import jus.aoo.lisp.*;
import jus.aoo.lisp.Primitives.*;
import java.util.LinkedList;

public class Reader implements ReaderConstants {
  public static void Parser() throws ParseException
  {
    Contexte.init_contexte();
    Reader parser = new Reader(System.in);
    while (true)
    {
      System.out.println("Lecture depuis la console..");
      System.out.print("Rentrer une commande lisp :");
      try
      {
        I_Sexp sexp = Reader.SEXPRESSION();
        System.out.println("Lecture : " + sexp.toString());
        System.out.println("Evaluation : " + sexp.eval().toString());
        System.out.println();

      }
      catch (Exception e)
      {
        System.out.println("Exception relevee");
        System.out.println(e.getMessage());
        Reader.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Une erreur a ete detectee");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public I_Sexp SEXPRESSION() throws ParseException {
  I_Sexp sexp, l, r;
  LinkedList < I_Sexp > list = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
    case CAR:
    case CDR:
    case COND:
    case ATOM:
    case EQ:
    case SET:
    case CONS:
    case EVAL:
    case APPLY:
    case QUIT:
    case SYMBOL:
      sexp = ATOM();
    //System.out.println("atom=" + sexp.toString());
    {if (true) return sexp;}
      break;
    case NIL:
      jj_consume_token(NIL);
    {if (true) return new Nil();}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      sexp = LIST();
    {if (true) return sexp;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public I_Sexp LIST() throws ParseException {
  I_Sexp s1, s2;
    s1 = SEXPRESSION();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      s2 = SEXPRESSION();
      break;
    case LPAR:
    case NIL:
    case QUOTE:
    case CAR:
    case CDR:
    case COND:
    case ATOM:
    case EQ:
    case SET:
    case CONS:
    case EVAL:
    case APPLY:
    case QUIT:
    case SYMBOL:
      s2 = LIST();
      break;
    case RPAR:
      jj_consume_token(RPAR);
               s2 = new Nil();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Scons(s1, s2);}
    throw new Error("Missing return statement in function");
  }

  static final public I_Sexp ATOM() throws ParseException {
 Token sym;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAR:
      jj_consume_token(CAR);
                  {if (true) return new Car();}
      break;
    case CDR:
      jj_consume_token(CDR);
                    {if (true) return new Cdr();}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
                      {if (true) return new Quote();}
      break;
    case CONS:
      jj_consume_token(CONS);
                     {if (true) return new Cons();}
      break;
    case COND:
      jj_consume_token(COND);
                     {if (true) return new Cons();}
      break;
    case ATOM:
      jj_consume_token(ATOM);
                     {if (true) return new Atom();}
      break;
    case EQ:
      jj_consume_token(EQ);
                   {if (true) return new Eq();}
      break;
    case SET:
      jj_consume_token(SET);
                    {if (true) return new Set();}
      break;
    case EVAL:
      jj_consume_token(EVAL);
                     {if (true) return new Eval();}
      break;
    case APPLY:
      jj_consume_token(APPLY);
                      {if (true) return new Apply();}
      break;
    case QUIT:
      jj_consume_token(QUIT);
                    System.out.println("Au revoir");
                                Contexte.afficher();
                                System.exit(1);
      break;
    case SYMBOL:
      sym = jj_consume_token(SYMBOL);
          {if (true) return new Symbole(sym.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ReaderTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3cffa00,0x3cfff00,0x3cff000,};
   }

  /** Constructor with InputStream. */
  public Reader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Reader(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Reader(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Reader(ReaderTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
