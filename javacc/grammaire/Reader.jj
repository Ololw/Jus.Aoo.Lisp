/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
//  debug_parser = true;
}

PARSER_BEGIN(Reader)
package grammaire;
import jus.aoo.lisp.*;
import java.util.LinkedList;

public class Reader
{
  public static void main(String args []) throws ParseException
  {
    Symbole.init_mem();
    Reader parser = new Reader(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        Sexpr sexp = Reader.SEXPRESSION();
        System.out.println("sexp=" + sexp.toString());
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Reader.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Reader)

// les caractères ignorés
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
  // attention élimine la notion de fin de ligne
| ""
| "\u0001"
| "\u0002"
| "\u0003"
| "\u0004"
| "\u0005"
| "\u0006"
| "\u0007"
| "\u0008"
| "\u000b"
| "\u000c"
| "\u000e"
| "\u000f"
| "\u0010"
| "\u0011"
| "\u0012"
| "\u0013"
| "\u0014"
| "\u0015"
| "\u0016"
| "\u0017"
| "\u0018"
| "\u0019"
| "\u001a"
| "\u001b"
| "\u001c"
| "\u001d"
| "\u001e"
| "\u001f"
| "\u007f"
}

MORE :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

< IN_SL_COMMENT >
SPECIAL_TOKEN :
{
  < SL_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_ML_COMMENT >
SPECIAL_TOKEN :
{
  < ML_COMMENT : "*/" > : DEFAULT
}

< IN_SL_COMMENT, IN_ML_COMMENT >
SKIP :
{
  < ~[ ] >
} // les lexèmes du langage

TOKEN : /* OPERATORS */
{
  < DOT : "." >
| < LPAR : "(" >
| < RPAR : ")" >
| < NIL : "()" >
| < QUOTE : "'" >
| < CAR : "car" >
| < CDR : "cdr" >
| < NUM : ([ "+", "-" ])? (< DIGIT >)+ >
}

TOKEN :
{
  < SYMBOL :
    (
      < DIGIT >
    | < LETTER >
    | < SPECIAL >
    )+ >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "A"-"Z", "a"-"z" ] >
| < #SPECIAL : ~[ "0"-"9", "a"-"z", "A"-"Z", "|", "(", ")", "'", "`", ",", " ", "\u001f", "\u007f" ] >
}

Sexpr SEXPRESSION() :
{
  Sexpr sexp, l, r;
  LinkedList < Sexpr > list = new LinkedList();
}
{
  sexp = ATOM()
  {
    System.out.println("ok SEXPRESSION()_ATOME");
    System.out.println("atom=" + sexp.toString());
    return sexp;
  }
| < LPAR > 
  sexp = LIST() 
  < RPAR >
  {
    return sexp;
  }
/*| < QUOTE > sexp = SEXPRESSION()
  {
    System.out.println("'atom='" + sexp.toString());
    return Scons.quote(sexp);
  }*/
| < NIL >
  {
    return new Nil();
  }
}

Sexpr LIST() :
{
  Sexpr s1, s2;
}
{
  s1 = SEXPRESSION()
  (
    < DOT > s2 = SEXPRESSION()
  | s2 = LIST()
  )
  {
    return new Scons(s1, s2);
  }
|
  {
    return new Nil();
  }
}

Sexpr ATOM() :
{
  Token t;
  String s;
}
{
  t = < SYMBOL >
  {
 //   System.out.println("ok SEXPRESSION()_ATOM()");
    
    s = t.toString();
    System.out.println(t.toString()+" depuis s");
    
    if (s.equals("nil")) 
    	return new Nil();
    	
    System.out.println("Pas rentre dans if");
    	
    Symbole m = new Symbole(s);

    System.out.println("Apres avoir cree m");
    
    System.out.println(m.toString());

    System.out.println("juste avant le return");
    	
    return m;
  }
| < CAR > s = SEXPRESSION()
	{
	  //lol1
	}
| < CDR > s = SEXPRESSION()
	{
	  //lol2
	}
| < QUOTE > s = SEXPRESSION()
	{
	  //lol3
	}
}
