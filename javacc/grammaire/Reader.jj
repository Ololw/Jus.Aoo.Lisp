/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
debug_parser = false;
}

PARSER_BEGIN(Reader)
package grammaire;
import jus.aoo.lisp.*;
import jus.aoo.lisp.Primitives.*;
import java.util.LinkedList;

public class Reader
{
  public static void Parser() throws ParseException
  {
    Contexte.init_contexte();
    Reader parser = new Reader(System.in);
    while (true)
    {
      System.out.println("Lecture depuis la console..");
      System.out.print("Rentrer une commande lisp :");
      try
      {
        I_Sexp sexp = Reader.SEXPRESSION();
        System.out.println("Lecture : " + sexp.toString());
        System.out.println("Evaluation : " + sexp.eval().toString());
        System.out.println();
        
      }
      catch (Exception e)
      {
        System.out.println("Exception relevee");
        System.out.println(e.getMessage());
        Reader.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Une erreur a ete detectee");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Reader)

// les caract√®res ignor√©s
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
  // attention √©limine la notion de fin de ligne
| ""
| "\u0001"
| "\u0002"
| "\u0003"
| "\u0004"
| "\u0005"
| "\u0006"
| "\u0007"
| "\u0008"
| "\u000b"
| "\u000c"
| "\u000e"
| "\u000f"
| "\u0010"
| "\u0011"
| "\u0012"
| "\u0013"
| "\u0014"
| "\u0015"
| "\u0016"
| "\u0017"
| "\u0018"
| "\u0019"
| "\u001a"
| "\u001b"
| "\u001c"
| "\u001d"
| "\u001e"
| "\u001f"
| "\u007f"
}

MORE :
{
  "//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}

< IN_SL_COMMENT >
SPECIAL_TOKEN :
{
  < SL_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_ML_COMMENT >
SPECIAL_TOKEN :
{
  < ML_COMMENT : "*/" > : DEFAULT
}

< IN_SL_COMMENT, IN_ML_COMMENT >
SKIP :
{
  < ~[ ] >
} // les lex√®mes du langage

TOKEN : /* OPERATORS */
{
  < DOT : "." >
| < LPAR : "(" >
| < RPAR : ")" >
| < NIL : "()" >
| < QUOTE : "'" >
| < CAR : "car" >
| < CDR : "cdr" >
| < COND : "cond" >
| < ATOM: "atom" >
| < EQ : "eq" >
| < SET : "set" >
| < CONS : "cons" >
| < IMPLODE : "implode" >
| < EXPLODE : "explode" >
| < EVAL : "eval" >
| < APPLY : "apply" >
| < QUIT : "quit" >
}

TOKEN :
{
  < SYMBOL :
    (
      < DIGIT >
    | < LETTER >
    | < SPECIAL >
    )+ >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "A"-"Z", "a"-"z" ] >
| < #SPECIAL : ["#","_","-","@","!",":","$","£"] >
}

I_Sexp SEXPRESSION() :
{
  I_Sexp sexp, l, r;
  LinkedList < I_Sexp > list = new LinkedList();
}
{
  sexp = ATOM()
  {
    //System.out.println("atom=" + sexp.toString());
    return sexp;
  }
| < NIL >
  {
    return new Nil();
  }
| < LPAR > 
  sexp = LIST() 
  {
    return sexp;
  }
}

I_Sexp LIST() :
{
  I_Sexp s1, s2;
}
{
  s1 = SEXPRESSION()
  (
    < DOT > s2 = SEXPRESSION()
  | s2 = LIST()
  | < RPAR > { s2 = new Nil(); }
  )
  {
    return new Scons(s1, s2);
  }
}


I_Sexp ATOM() :
{Token sym;} 
{ 	
	< CAR > { return new Car(); }
	| < CDR > { return new Cdr(); }
	| < QUOTE > { return new Quote(); }
	| < CONS > { return new Cons(); }
	| < COND > { return new Cons(); }
	| < ATOM > { return new Atom(); }
	| < EQ > { return new Eq(); }
	| < SET > { return new Set(); }
	| < EVAL > { return new Eval(); }
	| < APPLY > { return new Apply(); }
	| < QUIT > {System.out.println("Au revoir");
				Contexte.afficher();
				System.exit(1); }
	//| < IMPLODE > { return new Implode(); }
	//| < EXPLODE > { return new Explode(); }
	| sym = < SYMBOL > {
	  return new Symbole(sym.image);}
	  
}

